parse_rest
==========

**parse_rest** is a Python client for the [Parse REST API](https://www.parse.com/docs/rest). It provides Python object mapping for Parse objects with methods to save, update, and delete objects, as well as an interface for querying stored objects.

Installation
------------

The easiest way to install this package is from [PyPI](http://pypi.python.org/pypi), either using [easy_install](http://packages.python.org/distribute/easy_install.html):

    easy_install parse_rest

or [pip](http://pypi.python.org/pypi/pip):

    pip install parse_rest

(if you are using a Mac or Linux system you may need to prepend `sudo` to either command).

Alternatively, you can install it from source by downloading or cloning this repository:

    git clone git@github.com:dgrtwo/ParsePy.git

and performing the commands:

    python setup.py build
    python setup.py install

(again you may have to add `sudo` before `python setup.py install`).

Testing
-------

To run the tests, you need to:

* create a `settings_local.py` file in your local directory with three variables that define a sample Parse application to use for testing:

~~~~~ {python}
APPLICATION_ID = "APPLICATION_ID_HERE"
REST_API_KEY = "REST_API_KEY_HERE"
MASTER_KEY = "MASTER_KEY_HERE"
~~~~~

* install the [Parse CloudCode command line tool](https://www.parse.com/docs/cloud_code_guide)

You can then test the installation by running:

    python setup.py test


Basic Usage
-----------

Let's get everything set up first. You'll need to give `parse_rest` your `_Application Id_` and `_REST API Key_` (available from your Parse dashboard) in order to get access to your data.

~~~~~ {python}
>>> import parse_rest
>>> parse_rest.APPLICATION_ID = "your application id"
>>> parse_rest.REST_API_KEY = "your REST API key here"
~~~~~

To create a new object of the Parse class _GameScore_:

~~~~~ {python}
>>> gameScore = parse_rest.Object("GameScore")
>>> gameScore.score = 1337
>>> gameScore.playerName = "Sean Plott"
>>> gameScore.cheatMode = False
~~~~~

As you can see, we add new properties simply by assigning values to our _Object_'s attributes. Supported data types are any type that can be serialized by JSON and Python's _datetime.datetime_ object. (Binary data and references to other _Object_'s are also supported, as we'll see in a minute.)

To save our new object, just call the save() method:

~~~~~ {python}
>>> gameScore.save()
~~~~~

If we want to make an update, just call save() again after modifying an attribute to send the changes to the server:

~~~~~ {python}
>>> gameScore.score = 2061
>>> gameScore.save()
~~~~~

You can also increment the score in a single API query:

~~~~~ {python}
>>> gameScore.increment("score")
~~~~~

Now that we've done all that work creating our first Parse object, let's delete it:

~~~~~ {python}
>>> gameScore.delete()
~~~~~

That's it! You're ready to start saving data on Parse.

Object Metadata
---------------

The methods objectId(), createdAt(), and updatedAt() return metadata about a _Object_ that cannot be modified through the API:

~~~~~ {python}
>>> gameScore.objectId()
'xxwXx9eOec'
>>> gameScore.createdAt()
datetime.datetime(2011, 9, 16, 21, 51, 36, 784000)
>>> gameScore.updatedAt()
datetime.datetime(2011, 9, 118, 14, 18, 23, 152000)
~~~~~

Additional Datatypes
--------------------

If we want to store data in a Object, we should wrap it in a ParseBinaryDataWrapper. The ParseBinaryDataWrapper behaves just like a string, and inherits all of _str_'s methods.

~~~~~ {python}
>>> gameScore.victoryImage = parse_rest.ParseBinaryDataWrapper('\x03\xf3\r\n\xc7\x81\x7fNc ... ')
~~~~~

We can store a reference to another Object by assigning it to an attribute:

~~~~~ {python}
>>> collectedItem = parse_rest.Object("CollectedItem")
>>> collectedItem.type = "Sword"
>>> collectedItem.isAwesome = True
>>> collectedItem.save() # we have to save it before it can be referenced

>>> gameScore.item = collectedItem
~~~~~

We can also store geoPoint dataTypes as attributes using the format <code>'POINT(longitude latitude)'</code>, with latitude and longitude as float values

~~~~~ {python}
>>> restaurant = parse_rest.Object("Restaurant")
>>> restaurant.name = "Los Pollos Hermanos"
>>> restaurant.location ="POINT(12.0 -34.45)"
>>> restaurant.save()
~~~~~


Querying
--------

To retrieve an object with a Parse class of _GameScore_ and an _objectId_ of _xxwXx9eOec_, run:

~~~~~ {python}
>>> gameScore = parse_rest.ObjectQuery("GameScore").get("xxwXx9eOec")
~~~~~

We can also run more complex queries to retrieve a range of objects. For example, if we want to get a list of _GameScore_ objects with scores between 1000 and 2000 ordered by _playerName_, we would call:

~~~~~ {python}
>>> query = parse_rest.ObjectQuery("GameScore")
>>> query = query.gte("score", 1000).lt("score", 2000).order("playerName")
>>> GameScores = query.fetch()
~~~~~

Notice how queries are built by chaining filter functions. The available filter functions are:

* **Less Than**
    * lt(_parameter_name_, _value_)
* **Less Than Or Equal To**
    * lte(_parameter_name_, _value_)
* **Greater Than**
    * gt(_parameter_name_, _value_)
* **Greater Than Or Equal To**
    * gte(_parameter_name_, _value_)
* **Not Equal To**
    * ne(_parameter_name_, _value_)
* **Limit**
    * limit(_count_)
* **Skip**
    * skip(_count_)

We can also order the results using:

* **Order**
    * order(_parameter_name_, _decending_=False)

Users
-----

You can sign up, log in, modify or delete users as well, using the `User` object. Initialize it with a username and password, as well as any optional parameters.

~~~~~ {python}
>>> u = parse_rest.User("dhelmet", "12345", phone="555-555-5555")
>>> u.signup()
>>> u.login()
~~~~~

Once a `User` has been logged in, it saves its session so that it can be edited or deleted:

~~~~~ {python}
>>> u.highscore = 300
>>> u.save()
>>> u.delete()
~~~~~


Cloud Functions
---------------

Parse offers [CloudCode](https://www.parse.com/docs/cloud_code_guide), which has the ability to upload JavaScript functions that will be run on the server. You can use the `parse_rest` client to call those functions.

The CloudCode guide describes how to upload a function to the server. Let's say you upload the following `main.js` script:

~~~~~ {javascript}
Parse.Cloud.define("hello", function(request, response) {
  response.success("Hello world!");
});


Parse.Cloud.define("averageStars", function(request, response) {
  var query = new Parse.Query("Review");
  query.equalTo("movie", request.params.movie);
  query.find({
    success: function(results) {
      var sum = 0;
      for (var i = 0; i < results.length; ++i) {
        sum += results[i].get("stars");
      }
      response.success(sum / results.length);
    },
    error: function() {
      response.error("movie lookup failed");
    }
  });
});
~~~~~

Then you can call either of these functions using the `parse_rest.Function` class:

~~~~~ {python}
>>> hello_func = parse_rest.Function("hello")
>>> hello_func()
{u'result': u'Hello world!'}
>>> star_func = parse_rest.Function("averageStars")
>>> star_func(movie="The Matrix")
{u'result': 4.5}
~~~~~


That's it! This is a first try at a Python library for Parse, and is probably not bug-free. If you run into any issues, please get in touch -- dgrtwo@princeton.edu. Thanks!
